Tutorial: Set up Multi Org Hyperledger Fabric Network
https://www.udemy.com/tutorial-hyperledger-setup

Advanced course: Hyperledger Fabric Network Design & Setup
https://courses.pragmaticpaths.com/p/hyperledger-fabric/?coupon_code=HALFOFF

Go to http://acloudfan.com/download-files
	and download HLF-Workbench-v1.3-02
	unzip with password: 11-10-2018
	
Failed to build python?
MSBUILD : error MSB3428: Could not load the Visual C++ component "VCBuild.exe". To fix this, 1) install the .NET Framework 2.0 SDK, 2) install
 Microsoft Visual Studio 2005 or 3) add the location of the component to the system path if it is installed elsewhere.
	npm install --global --production windows-build-tools
	npm install --global node-gyp
	
Install yo
> npm install --global yo
> npm install --global generator-hyperledger-composer
Verify
> yo --generators

============================ SET UP ===============================
Open Visual Code at folder:
D:\Hyperledger\NetworkSetupUdemy\HLF-Workbench-v1.3-02
Type command:
> code .

In Visual Code, Open terminal
Start the machine
> vagrant up
Login to the machine
> vagrant ssh

Setup prerequisite software:

Docker:
$ cd setup
$ chmod 755 *.sh
$ sudo ./docker.sh

$ exit

> vagrant ssh
$ docker version
Client:
 Version:           18.09.0
Engine:
 Version:          18.09.0

Fabric
$ cd setup
$ sudo ./fabric-setup.sh
$ orderer version
	Version: 1.3.0
$ peer version
	Version: 1.3.0


CA Server
$ sudo ./caserver-setup.sh
$ fabric-ca-server version
Version: 1.3.1
 Go version: go1.10.4
$ fabric-ca-client version
Version: 1.3.1
 Go version: go1.10.4

================== Workbench folders overview ======================
artefacts
bin
cloud
composer
	cards
	test
config
env
fabric-ca
	bins
	client
	server
nodechaincode
orderer
peers
setup
Vagrantfile

------------------------------------------
Quick setup and test
1. Setup CA Server & setup all of the identities
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/
$ ./run-all-caserver.sh

2. Generate configuration and launch Oderer
vagrant@vagrant:/vagrant$ cd orderer/bins/
$ ./run-all-orderer.sh

3. Create the airlinechannel and launch peers
vagrant@vagrant:/vagrant$ cd peers/bins/
$ ./run-all-peers.sh

4. Test
vagrant@vagrant:/vagrant/peers/bins$ . set-env.sh acme 7050 admin
	Current Identity Context:
	Switching IDENTITY Context to Org = acme  admin
	Setting PORT_NUMBER_BASE=7050
s$ ./chain-test.sh install
$ ./chain-test.sh instantiate
	(Note that can be time-out and we need to re-execute the command)
$ peer chaincode list --instantiated -C airlinechannel
	Get instantiated chaincodes on channel airlinechannel:
	Name: nodecc, Version: 1.0, Path: ../../nodechaincode, Escc: escc, Vscc: vscc
$ ./chain-test.sh query
$ ./chain-test.sh invoke
$ ./chain-test.sh query

Clean up:
At component level or At Workbench level
./setup/clean.sh
vagrant@vagrant:/vagrant$ cd setup
$ ./clean.sh

--- Detail log, see at: Memo-Run-All-In-One.txt

--------------3. Setup the Fabric Network Identities------------------
Identites management using Fabric CA
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/
$ ./init-fabric-ca.sh
$ ./launch-caserver.sh

There are some usefull scripts under fabric-ca/bins/:
clean.sh: clean all ca info under server and client folders
init-fabric-ca.sh: initialized and enroll CA Registrar admin
****** set-client-home.sh ORG_NAME ENROLL_ID: after that, the Fabric CA Client binary will be executed under context of that ORG_NAME and ENROLL_ID
$ . set-client-home.sh caserver admin
	FABRIC_CA_CLIENT_HOME=/vagrant/fabric-ca/bins/../client/caserver/admin
$ fabric-ca-client identity list
Name: admin, Type: client, Affiliation: , Max Enrollments: -1, Attributes: [{Name:hf.AffiliationMgr Value:1 ECert:false} {Name:hf.Registrar.Roles Value:* ECert:false} {Name:hf.Registrar.DelegateRoles Value:* ECert:false} {Name:hf.Revoker Value:1 ECert:false} {Name:hf.IntermediateCA Value:1 ECert:false} {Name:hf.GenCRL Value:1 ECert:false} {Name:hf.Registrar.Attributes Value:* ECert:false}]

gen-admin-identities.sh: generate identities for admin of org
gen-orderer-identity.sh: generate identities for orderer
gen-peer-identity.sh: generate identities for peer
create-org-msp.sh: needed for network configuration

--------------- Organization Admin Identities ---------------
Each org must have at least 1 org admin
$ ./gen-admin-identities.sh

Test
$ . set-client-home.sh acme admin
	FABRIC_CA_CLIENT_HOME=/vagrant/fabric-ca/bins/../client/acme/admin
$ fabric-ca-client identity list
Name: acme-admin, Type: client, Affiliation: acme, Max Enrollments: -1, Attributes: [{Name:hf.AffiliationMgr Value:true ECert:false} {Name:hf.Revoker Value:true ECert:false} {Name:hf.Registrar.Roles Value:peer,user,client ECert:false} {Name:hf.EnrollmentID Value:acme-admin ECert:true}
{Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value:acme ECert:true}]


--------------- Organization MSP Setup ---------------
Each identities has their MPS
An Organization has Organization MSP is used for Blockchain network configuration (such as provided in Genesis Block)

$ ./create-org-msp.sh
After that, under fabric-ca\client\{OrgName}\ will have msp folder

---------------4. Network Configuration & Setting up the Orderer ---------------
Network configuration elements
- Organization
- Odering Service
- Peer. Each org must have at least 1 Anchor Peer
- Policy
Config file: config\configtx.yaml contains profile for genesis block (ordererchannel) and app channel

Using configtxgen to gen config from yaml file
Start VM and start CA Server
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/ $ ./launch-caserver.sh
(CA Server default port: 7050)

Open new terminal:
vagrant@vagrant:/vagrant$ cd orderer/bins/
$ ./gen-config.sh
Then we can see there are two files generated in artefacts folder:
- airline-channel.tx (system channel / orderer channel)
- airline-genesis.block (genesis block for network)

Oderer setup:
There are two messaging merchanism:
- Solo (default in Fabric)
- Kafka cluster to support multiple instance of orderer (suitable for production mode)

Orderer default port: 7050

Setup Orderer identity:
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/
$ ./gen-orderer-identity.sh
Now under \fabric-ca\client\orderer folder, we can see another MSP folder for orderer identity

vagrant@vagrant:/vagrant/orderer/bins$ ./launch-orderer.sh
Check log file: \orderer\orderer.log to see
[orderer/common/server] Start -> INFO 013 [0m Beginning to serve requests
We can press Ctrl+C to kill the orderer process

Or we can run orderer in the background:
vagrant@vagrant:/vagrant/orderer/bins$ ./launch-orderer.sh &
Check:
$ ps
to see PID orderer

To stop orderer:
vagrant@vagrant:/vagrant/orderer/bins$ ./stop-all.sh

----------------------------------------------------------------------------
--------------------------- 5. Setup the Peers ---------------------------
----------------------------------------------------------------------------
Start CA Server:
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/ 
$ ./launch-caserver.sh

Start Orderer:
vagrant@vagrant:/vagrant$ cd orderer/bins/
$ ./launch-orderer.sh &

--------------- Create Channel ---------------

Step:
	Create channel
	Launch the peers
	Join the channel
Configuration file in \peers\core.yaml
Peers base port:
acme: 7050
budget: 9050

Create channel:
Open new terminal and login to VM
vagrant@vagrant:/vagrant$ cd peers/bins/
$ . set-env.sh acme
	Current Identity Context:
	Switching IDENTITY Context to Org = acme  admin
	Setting PORT_NUMBER_BASE=7050
$ ./show-env.sh

$ ./create-channel.sh
Then we will see file:
peers\airlinechannel-genesis.block

Create Peer identity:
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/
$ . set-client-home.sh acme admin
$ ./gen-peer-identity.sh acme acme-peer1
Check path: fabric-ca\client\acme\acme-peer1

Launch the peer:
vagrant@vagrant:/vagrant$ cd peers/bins/
$ . set-env.sh acme 7050 admin
$ ./launch-peer.sh acme 7050 acme-peer1
Check file: peers\acme-peer1.log

$ ./show-env.sh
Current Identity Context:  acme   admin
=========================
CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
CORE_PEER_LOCALMSPID=AcmeMSP
CORE_PEER_LISTENADDRESS=0.0.0.0:7051
CORE_PEER_MSPCONFIGPATH=/vagrant/peers/bins/../../fabric-ca/client/acme/admin/msp
CORE_PEER_EVENTS_ADDRESS=0.0.0.0:7053
CORE_PEER_ADDRESS=0.0.0.0:7051
FABRIC_CFG_PATH=/vagrant/peers/bins/..
Fabric Processes
================
0 S  1000  1785     1  2  80   0 - 47040 futex_ pts/2    00:00:01 peer
0 S  1000  1699  1698  0  80   0 - 56528 futex_ pts/1    00:00:00 orderer
0 S  1000  1654  1653  0  80   0 - 68092 futex_ pts/0    00:00:00 fabric-ca-serve

Join the channel
vagrant@vagrant:/vagrant/peers/bins$ ./join-channel.sh

Check:
$ peer channel list
2018-11-20 13:51:39.725 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
Channels peers has joined:
airlinechannel

Test chaincode on peer:
Step:
Org admin install chaincode on the peers: compile and save to file system of peer
Then instantiate the chaincode: launch Docker container to launch the chaincode
(For now, we don't know about Endorsing Peer)

Use nodechaincode\chaincode_example02.js for example.

vagrant@vagrant:/vagrant/peers/bins$ . set-env.sh acme 7050 admin

$ ./chain-test.sh install

$ ./chain-test.sh instantiate

$ peer chaincode list --instantiated -C airlinechannel

Test
$ ./chain-test.sh query
$ ./chain-test.sh invoke
$ ./chain-test.sh query

Open new TERMINAL
Adding a non-anchor peer:
CA
vagrant@vagrant:/vagrant/fabric-ca/bins$ . set-client-home.sh acme admin
$ ./gen-peer-identity.sh acme acme-peer2

Launch the peer
$ ./launch-peer.sh acme 8050 acme-peer2
Check: peers\acme-peer2.log

Join the channel
$ . set-env.sh acme 8050 admin
$ ./join-channel.sh

$ ./show-env.sh
Current Identity Context:  acme   admin
=========================
CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052
CORE_PEER_LOCALMSPID=AcmeMSP
CORE_PEER_LISTENADDRESS=0.0.0.0:8051
CORE_PEER_MSPCONFIGPATH=/vagrant/peers/bins/../../fabric-ca/client/acme/admin/msp
CORE_PEER_EVENTS_ADDRESS=0.0.0.0:8053
CORE_PEER_ADDRESS=0.0.0.0:8051
FABRIC_CFG_PATH=/vagrant/peers/bins/..
Fabric Processes
================
0 S  1000  1785     1  1  80   0 - 69253 futex_ pts/2    00:00:18 peer
0 S  1000  1998     1  1  80   0 - 69269 ep_pol pts/2    00:00:03 peer
0 S  1000  1699  1698  0  80   0 - 56528 futex_ pts/1    00:00:00 orderer
0 S  1000  1654  1653  0  80   0 - 68092 futex_ pts/0    00:00:00 fabric-ca-serve

Test
vagrant@vagrant:/vagrant/peers/bins$ ./chain-test.sh install
$ ./chain-test.sh query

Open new TERMINAL
Setup Anchor peer for Budger Organization
On base port 9050
Do the same...

To clean up all peers:
vagrant@vagrant:/vagrant/peers/bins$ ./clean.sh

----------------------------------------------------------------------------
-------- 6. Install & Test Composer Application in multi org setup ---------
----------------------------------------------------------------------------
Start CA Server:
vagrant@vagrant:/vagrant$ cd fabric-ca/bins/
$ ./launch-caserver.sh

Start Orderer:
vagrant@vagrant:/vagrant$ cd orderer/bins/
$ ./launch-orderer.sh &

(No need to Create channel again)
Below error will cause if we try to create the same channel again
Error: got unexpected status: BAD_REQUEST -- error authorizing update: error validating ReadSet: readset expected key [Group]  /Channel/Application at version 0, but got version 1

Peers:
vagrant@vagrant:/vagrant$ cd peers/bins/
$ . set-env.sh acme 7050 admin
$ ./join-channel.sh
$ . set-env.sh acme 7050 admin
$ ./chain-test.sh install
$ ./chain-test.sh instantiate
$ peer chaincode list --instantiated -C airlinechannel
$ ./chain-test.sh query

Composer
composer\test: test application
composer\cards: peer admin cards for setup
composer\utils: node based util code

Step:
	Setup a test composer BNA
	Setup network cards for PeerAdmins
	Install, Start & Test Composer Application
All Composer command is executed from Host machine CLI

Open new Termnial
(Stay at CMD, DON'T SSH to VM)

> cd .\composer\test
> yo hyperledger-composer

Type of project: Business Network
Empty template network?: No

> cd .\test-bna
> npm install

> cd dist
> composer archive create --sourceType dir --sourceName ../
> ls

Peer admin: admin of node
Network admin: admin of app level. Setup by peer admin

Peer admin install composer applications and network admin identites.
Network admin can issue identities for participant

To interact with Composer application (runtime), all participants need business card (credentials, Keys & Certificates, Connection profile) installed in local machine

Card is used by API, Composer tools

Storage of card:
User home folder: ~/.composer

In env folder, there are two files:
- single-org
- multi-org

Generate Peer Admin Card

> cd .\composer\util
> npm install

> node .\card-ops.js

Select >.. generate admin card for multiple org

Check in composer\cards folder, there are 3 cards generated

> node .\card-ops.js
Select >.. Install/Replace...

> composer card list
There are 3 cards list up

Install Business Network
- Install and Start test BNA on acme-peer1
- Import the Network Admin Card
- Launch the REST Server & Test

> cd composer\test\test-bna\dist
> composer network install -a test-bna@0.0.1.bna -c Acme-peer1PeerAdmin@hlfv1

> composer network start -n test-bna -c Acme-peer1PeerAdmin@hlfv1 -V 0.0.1 -A acme-admin -S pw

> ls

Come back to PEER acme TERMINAL
vagrant@vagrant:/vagrant$ cd peers/bins/
$ . set-env.sh acme 7050 admin

$ peer chaincode list --installed

$ peer chaincode list --instatiated -C airlinechannel

Switch to HOST CMD
> composer card import -f .\peer1-acme-admin@test-bna.card
> composer card list

Composer REST Server
> composer-rest-server -c acme-admin@test-bna

Go to browser at:
localhost:3000

Composer for multiple org:

> cd .\composer\util
> node .\replicate-networkadmin-cards.js multi-org.yaml

> composer card list

Then we can use rest server card for rest server
> composer-rest-server -c restserver-acme-admin@test-bna

REST Server is now connect to any peer

localhost:3000


----------------------------------------------------------------------------
-- 7. Setting up Multi Org (multi VM) Fabric infrastructure on the Cloud ---
----------------------------------------------------------------------------




